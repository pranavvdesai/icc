import { useEffect, useState } from "react";
import Router from "next/router";
import Head from "next/head";
// import * as PushAPI from "@pushprotocol/restapi";
import { useAuth } from "@arcana/auth-react";
import { rpcURLnetwork, authArcana } from "../utils/authArcana";
import axios from "axios";


export default function Login() {
  const { user, connect, isLoggedIn, loading, loginWithSocial, provider } = useAuth();
  const [loader, setLoader] = useState(false);

  const onConnectClick = async () => {
    try {
      await connect();
    } catch (e) {
      console.log(e);
    }
  };

  const onConnect = async () => {
    setLoader(true);
    console.log("connected");
    await authArcana.init();
    const info = await authArcana.getUser();
    console.log(info);
    try {
      const res = await axios.post(
        `${process.env.NEXT_PUBLIC_BACKEND_URL}/api/jwt/create`,
        {
          email: info.email,
          password: info.address,
          re_password: info.address,
        }
      );
      console.log(res.data);
      localStorage.setItem("token", res.data.access);
      setLoader(false);
      Router.push("/home");
    }
    catch (e) {
      if (e.response.data.detail === "No active account found with the given credentials") {
        const res = await axios.post(
          `${process.env.NEXT_PUBLIC_BACKEND_URL}/api/users/`,
          {
            email: info.email,
            password: info.address,
            re_password: info.address,
            wallet_address: info.address,
          }
        );
        console.log(res.data);
        const res2 = await axios.post(
          `${process.env.NEXT_PUBLIC_BACKEND_URL}/api/jwt/create`,
          {
            email: info.email,
            password: info.address,
            re_password: info.address,
            wallet_address: info.address,
          }
        );
        console.log(res2.data);
        if (res2.data.access) {
          localStorage.setItem("token", res2.data.access);
          setLoader(false);
          Router.push("/home");
        }
      }
    }
  };
  useEffect(() => {
    provider.on("connect", onConnect);
    return () => {
      provider.removeListener("connect", onConnect);
    };

  }, [provider]);
  // TODO: Integrate Arcana Login
  return (
    <>
      <Head>
        <title>ICC App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="relative flex flex-col justify-center min-h-screen overflow-hidden">
        <div className="w-full p-6 m-auto bg-black text-white rounded-md shadow-md lg:max-w-xl">
          <h1 className="text-3xl font-semibold text-center text-white">
            Welcome To ICC
          </h1>
          <div className="flex justify-center items-center mt-5">
            <button
              onClick={onConnectClick}
              className="bg-sky-500 text-white rounded-md shadow-md p-2 mt-5 w-1/2 flex items-center justify-center"
            >
              Sign In
            </button>
          </div>
        </div>
        {/* Show Loader */}
        {loader && (
          <div className="absolute top-0 left-0 w-full h-full bg-black bg-opacity-50 flex items-center justify-center">
            <div className="loader ease-linear rounded-full border-4 border-t-4 border-gray-200 h-12 w-12 mb-4">
            </div>
          </div>
        )}
      </div>
    </>
  );
}